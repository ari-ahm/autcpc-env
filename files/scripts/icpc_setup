#!/usr/bin/env python3
from whiptail import Whiptail
from pathlib import Path
import urllib.request
import csv
from subprocess import PIPE, Popen
import re
import time
import sys
import signal
import os
from urllib.parse import urlparse, quote

# Trap SIGHUP because systemd sends it and we don't want it to interrupt us
signal.signal(signal.SIGHUP, signal.SIG_IGN)



def make_safe_url(url: str) -> str:
    """
    Returns a parsed and quoted url
    """
    _url = urlparse(url)
    url = _url.scheme + "://" + _url.netloc + quote(_url.path) + "?" + quote(_url.query)
    return url

def read_file(path, default):
    try:
        contents = Path(path).read_text().strip()
        if len(contents) == 0:
            return default
        return contents
    except Exception as e:
        # TODO log/handle specific errors more properly here
        pass
    return default


def fetch_url(url):
    try:
        with urllib.request.urlopen(make_safe_url(url)) as response:
            return response.read().decode("UTF-8").strip()
    except urllib.error.URLError as e:
        w = Whiptail(title="URL Fetch Error")
        w.msgbox(f"Exception fetching {url}:\n\n{e}")
    except Exception as e:
        w = Whiptail(title="URL Fetch Error")
        w.msgbox(f"Exception fetching {url}:\n\n{e}")
    return ''


def run_cmd(cmd, ignore_errors=False):
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()

    if p.returncode != 0 and not ignore_errors:
        w = Whiptail("Command Error")
        w.msgbox(
            f"""Command: {cmd}
Code: {p.returncode}
Out:
{out}

Err:
{err}
"""
        )

    return (p.returncode, out, err)


def load_printers():
    printers = []
    (ret, out, err) = run_cmd(["lpstat", "-v"], ignore_errors=True)
    lpstat_re = re.compile(r"^device for (?P<name>[^:]+): (?P<uri>.+)$")
    for l in out.decode("UTF-8").splitlines():
        m = lpstat_re.match(l)
        # Only return printers named 'Printer' (because those are the ones we're managing)
        if not m.group("name").startswith("Printer"):
            continue
        printers.append({"uri": m.group("uri"), "name": m.group("name")})
    return printers


def wifi_interfaces():
    # WIRELESS_INTERFACES=$(iw dev | awk -F' ' '/Interface/{print $2}')
    if_re = re.compile(r".+Interface (?P<name>.+)$")
    (ret, out, err) = run_cmd(["iw", "dev"])

    interfaces = []
    for l in filter(lambda x: "Interface" in x, out.decode("UTF-8").splitlines()):
        m = if_re.match(l)
        interfaces.append(m.group("name"))

    return interfaces


def wifi_scan(interface):
    # iw $WIFI_INTERFACE scan | awk -F': ' '/SSID:/{print $2}'

    # Make sure the interface is up, otherwise scan won't work
    (ret, out, err) = run_cmd(["ip", "link", "set", "dev", interface, "up"])

    # Scan for networks
    (ret, out, err) = run_cmd(["iw", interface, "scan"])
    ssid_re = re.compile(r"^SSID: (?P<ssid>.+)$")

    ssids = []
    for l in filter(lambda x: "SSID:" in x, out.decode("UTF-8").splitlines()):
        m = ssid_re.match(l.strip())
        if m is not None:
            ssids.append(m.group("ssid"))

    return ssids


def check_network():
    try:
        urllib.request.urlopen("http://configs.cloudcontest.org/online_check", timeout=1)
        return True
    except Exception as e:
        print(f"network broken: {e}")
        time.sleep(2)
        return False


config_url = read_file("/icpc/config_url_base", "http://configs.cloudcontest.org")
configuration = {}
PAPERSIZE = "letter"  # or 'a4'


def main():

    # This script must be run as root
    if os.geteuid() != 0:
        print("Error: This script must be run as root!")
        sys.exit(1)

    # Do some _really_ basic cli argument handling
    force = False
    if len(sys.argv) > 1 and (sys.argv[1] == "-f" or sys.argv[1] == "--force"):
        force = True

    # Exit if the configuration has already been run and the force argument was not specified
    if Path("/icpc/setup-complete").exists() and not force:
        print("Already configured. Run with -f or --force to reconfigure.")
        sys.exit(0)

    # Figure out what contest this is, because it informs some other choices
    configuration["contest"] = read_file("/icpc/CONTEST", None)

    # Initialize our dialog (with network status in the backtitle)
    print("Waiting up to 30s for network...")
    network_status = False
    for i in range(0, 30):
        if check_network():
            network_status = True
            break
        print(".", end="")
        time.sleep(1)
    w = Whiptail(title="ICPC Setup", backtitle=f"Network status: {'online' if network_status else 'offline'}")

    # Print a welcome message! (and record whether they pressed esc or ok)
    welcome_ok = welcome(w)

    # prompt to configure Wifi if the network isn't functional and the computer has a wireless interface
    if not check_network() and len(wifi_interfaces()) > 0:
        configure_wifi(w)

        # Refresh the backtitle with network status now that wifi is configured (hopefully)
        network_status = check_network()
        w.backtitle = f"Network status: {'online' if network_status else 'offline'}"

    # they pressed escape on the welcome screen (instead of ok), load some demo data and then exit
    # if not welcome_ok:
    #     configuration['contest'] = 'demo'
    #     configuration['site'] = 'demo site'
    #     configuration['team'] = {
    #         "id": '000',
    #         "name": 'demo team',
    #         "affiliation": 'fake affiliation',
    #         "extra": 'team extra - like division information',
    #     }
    #     configuration['printers'] = []
    #     configuration["print_test_page"] = False
    #     cfg_printing = False
    # else:

    # Choose the contest this image is participating in
    configure_contest(w)

    # Choose a contest site (this will decide what teams/printers are available later)
    configure_site(w)

    # Choose a team that will use this computer
    configure_team(w)

    # configure_autologin(w) # TODO

    # Figure out if they want to configure printers (and what that looks like)
    cfg_printing = configure_printing(w)

    # show a summary/confirm they want to apply/move ont
    if not confirm_summary(w):
        # re-invoke ourselves to start over
        os.execv(sys.argv[0], sys.argv)

    # Apply the configuration things previously specified
    apply_configuration()
    apply_wallpaper()
    if cfg_printing:
        ret = apply_printers()
        if not ret:
            w.msgbox("Printing configuration failed. Re-run this script to correct any printer configuration errors")

    # Clear the screen
    print(chr(27) + "[H" + chr(27) + "[J")

    # Run the self-test script
    p = Popen("su - -c /icpc/scripts/self_test | tee /icpc/self_test_report", shell=True, stderr=PIPE)
    out, err = p.communicate()
    code = p.returncode

    if configuration["print_test_page"]:
        (ret, out, err) = run_cmd(["su", "-", "contestant", "-c", "/icpc/scripts/printfile /icpc/self_test_report"])
        print("Test page sent to printer...")

    # Remove the self-test report
    Path("/icpc/self_test_report").unlink()

    input("Press [enter] to continue")
    Path("/icpc/setup-complete").write_text(configuration["site"] + "\n")


def confirm_summary(w: Whiptail):
    w.title = "ICPC Setup Summary"
    return w.yesno(
        msg=f"""
Contest: {configuration['contest']}
Site: {configuration['site']}
Team: {configuration['team']['id']} - {configuration['team']['name']} ({configuration['team']['affiliation']})
Printers:
{configuration['printers']}

Is this correct?
    """
    )


def apply_printers():
    failed = False
    existing_printers = load_printers()
    if configuration["delete_printers"]:
        for p in existing_printers:
            (ret, out, err) = run_cmd(["lpadmin", "-x", p["name"]])
            # TOOO handle errors
        (ret, out, err) = run_cmd(["lpadmin", "-x", "ContestPrinter"])  # this is a printer class
        if ret != 0:
            failed = True
        existing_printers = []

    for i, p in enumerate(configuration["printers"]):
        uri = p["uri"]
        driver = p["driver"]

        # A few driver overrides, but everything should us the everywhere driver these days
        if driver == "ps":
            driver = "drv:///sample.drv/generic.ppd"
        if driver == "pcl":
            driver = "drv:///sample.drv/generpcl.ppd"

        name = f"Printer{len(existing_printers) + i}"

        # TODO: acls on printing (default deny? then only allow the contestant to print to what we configure?)
        (ret, out, err) = run_cmd(
            [
                "lpadmin",
                "-p",
                name,
                "-v",
                p["uri"],
                "-E",  # enable + set to accept jobs
                "-m",
                driver,
                "-L",
                p["note"],  # location field, but we put our "note" here
                "-o",
                f"media=#{PAPERSIZE}",  # Set paper size (a4 or letter)
                "-o",
                "printer-is-shared=false",  # don't set it as shared
            ]
        )
        if ret != 0:
            failed = True
            continue

        # Add the printer to the ContestPrinter class
        (ret, out, err) = run_cmd(["lpadmin", "-p", name, "-c", "ContestPrinter"])
        if ret != 0:
            failed = True
            continue

        # really make sure the printer is enabled/accepting jobs
        (ret, out, err) = run_cmd(["cupsenable", name])
        if ret != 0:
            failed = True
            continue

        (ret, out, err) = run_cmd(["cupsaccept", name])
        if ret != 0:
            failed = True
            continue

    # Check if we have any printers present, if so make sure we enable the class and set it as default
    # also ask about printing a test page
    existing_printers = load_printers()
    if len(existing_printers) > 0:
        # Set as default
        (ret, out, err) = run_cmd(["lpadmin", "-d", "ContestPrinter"])
        if ret != 0:
            return (
                False  # return here because setting failed and breaking out of the if statement we're in is difficult
            )

        # Set it as enabled
        (ret, out, err) = run_cmd(["cupsenable", "ContestPrinter"])
        if ret != 0:
            return False

        # Set it as accepting jobs
        (ret, out, err) = run_cmd(["cupsaccept", "ContestPrinter"])
        if ret != 0:
            return False

    return not failed


def apply_configuration():
    # Write the configuration out to files
    Path("/icpc/CONTEST").write_text(configuration["contest"] + "\n")
    Path("/icpc/SITE").write_text(configuration["site"] + "\n")
    Path("/icpc/TEAMID").write_text(configuration["team"]["id"] + "\n")
    Path("/icpc/TEAMNAME").write_text(configuration["team"]["name"] + "\n")
    Path("/icpc/TEAMAFFILIATION").write_text(configuration["team"]["affiliation"] + "\n")
    Path("/icpc/TEAM").write_text(
        f"{configuration['team']['id']} - {configuration['team']['name']} ({configuration['team']['affiliation']})\n"
    )

    # Update the hostname to the team's id
    new_hostname = "icpc-team-" + configuration["team"]["id"]
    Path("/etc/hostname").write_text(new_hostname + "\n")
    Path("/proc/sys/kernel/hostname").write_text(new_hostname + "\n")

    # Update the hosts file
    host_lines = Path("/etc/hosts").read_text().splitlines()
    for i, line in enumerate(host_lines):
        if line.startswith("127.0.1.1 "):
            host_lines[i] = f"127.0.1.1 {new_hostname}.icpcnet.internal {new_hostname}"
    Path("/etc/hosts").write_text("\n".join(host_lines) + "\n")



def apply_wallpaper():
    cmd = [
        "convert",
        "/icpc/wallpaper.png",
        "-gravity",
        "center",
        "-pointsize",
        "50",
        "-family", "Ubuntu",
        "-stroke",
        "#000C",
        "-strokewidth",
        "2",
        "-annotate",
        "0",
        configuration["team"]["name"],
        "-stroke",
        "none",
        "-fill",
        "white",
        "-annotate",
        "0",
        configuration["team"]["name"],
        "-pointsize",
        "30",
        "-stroke",
        "#000C",
        "-strokewidth",
        "2",
        "-annotate",
        "+0+60",
        configuration["team"]["affiliation"],
        "-stroke",
        "none",
        "-fill",
        "white",
        "-annotate",
        "+0+60",
        configuration["team"]["affiliation"],
        "/icpc/teamWallpaper.png",
    ]
    (code, out, err) = run_cmd(cmd)
    if code != 0:
        w = Whiptail(title="Wallpaper Generation Error")
        w.msgbox(
            f"Error applying wallpaper:\ncommand:{' '.join(cmd)}\n\nReturn Code: {code}\n\nout: {out}\n\nerr: {err}"
        )
    # convert /icpc/wallpaper.png \
    # -gravity center -pointsize 50 \
    # -stroke '#000C' -strokewidth 2 -annotate 0 "$(cat /icpc/TEAMNAME)" \
    # -stroke none -fill white -annotate 0 "$(cat /icpc/TEAMNAME)" \
    # -pointsize 30 \
    # -stroke '#000C' -strokewidth 2 -annotate +0+60 "$(cat /icpc/TEAMAFFILIATION)" \
    # -stroke none -fill white -annotate +0+60 "$(cat /icpc/TEAMAFFILIATION)" \
    # /icpc/teamWallpaper.png


def welcome(w: Whiptail):
    w.title = "ICPC Setup - Welcome"
    code = w.msgbox(
        "Please answer the following questions to finalize the configuration of your environment.\n\nYou can re-run this script later by executing '/icpc/scripts/icpc_setup -f' as root."
    )

    return code == 0


def apply_wifi(interface, ssid, password):
    with open("/etc/netplan/50-wifi-config.yaml", "w+") as f:
        f.write(
            f"""
# Created by firstboot script
network:
  version: 2
  renderer: networkd
  wifis:
    {interface}:
      access-points:
        "{ssid}":
          password: "{password}"
      dhcp4: true
      dhcp-identifier: mac
"""
        )

    print("Connecting to wifi...")
    (ret, out, err) = run_cmd("netplan", "apply")
    has_net = False
    for i in range(0, 60, 5):
        if check_network():
            has_net = True
            break
        time.sleep(5)

    if has_net:
        print("Connected successfully!")
    else:
        print("Error connecting")


def configure_wifi(w: Whiptail):
    interfaces = wifi_interfaces()

    w.title = "ICPC Setup - WiFi Setup"

    # TODO: error handling
    (choice, code) = w.menu(
        msg="No network was detected. Choose your wireless interface to configure wifi", items=interfaces
    )
    interface = choice
    print(f"Scanning for networks on: {interface}")
    ssids = wifi_scan(interface)

    # TODO: error handling
    (choice, code) = w.menu(msg="Select a network to connect to.\nIt must support WPA 2 authentication.", items=ssids)
    ssid = choice

    (password, code) = w.inputbox(msg=f"Enter the network password for: {ssid}", password=True)

    apply_wifi(interface, ssid, password)


def configure_contest(w: Whiptail):
    configuration["contest"] = read_file("/icpc/CONTEST", None)

    # Skip contest configuration if it's already specified
    if configuration['contest'] is not None:
        configuration['url'] = config_url + '/' + configuration['contest']
        return

    w.title = "ICPC Setup - Contest Selection"
    while True:
        content = fetch_url(config_url + "/contests")
        contests = list(filter(lambda l: len(l.strip()) > 0, content.splitlines()))
        contests.append('Enter Manually')

        from pprint import pprint
        pprint(contests)

        contest, _code = w.menu(msg="Choose the contest this machine belongs to:", items=contests)

        if contest == 'Enter Manually':
            contest, _code = w.inputbox(msg="Enter your contest id:")

        confirm = w.yesno(msg=f"You chose the following contest. Be absolutely sure this is correct as this wizard will not ask again:\n\n{contest}\n\nIs this correct?", default='yes')
        if confirm:
            break

    # Specify the config url/contest in the configuration hash
    configuration['contest'] = contest
    configuration['url'] = config_url + '/' + contest



def configure_site(w: Whiptail):
    w.title = "ICPC Setup - Site Configuration"
    configuration["site"] = read_file("/icpc/SITE", None)

    while True:
        content = fetch_url(configuration['url'] + "/sites.csv")
        sites = list(csv.DictReader(content.splitlines(), fieldnames=["id", "name"]))

        menu = [(s["id"], s["name"]) for s in sites]
        if configuration['site'] is not None:
            menu.insert(0, ("keep", f"Keep existing site({configuration['site']})"))
        menu.append(('manual', 'Enter site name manually'))

        (site, code) = w.menu("Choose your contest site from the list", items=menu)
        if code != 0:
            print("Screen aborted, asking again.")
            continue

        if site == 'manual':
            site, code = w.inputbox(msg="Enter your contest site:")

        if site == 'keep':
            site = configuration['site']

        if code == 0:
            break

    configuration["site"] = site


def configure_team(w: Whiptail):
    w.title = "ICPC Setup - Team Configuration"
    configuration["team"] = {
        "id": read_file("/icpc/TEAMID", "000"),
        "name": read_file("/icpc/TEAMNAME", "default team"),
        "affiliation": read_file("/icpc/TEAMAFFILIATION", "default university"),
        "extra": read_file("/icpc/TEAMEXTRA", "extra data"),
    }

    content = fetch_url(configuration['url'] + f"/teams/{configuration['site']}_teams.csv")
    teams = list(csv.DictReader(content.splitlines(), fieldnames=["id", "name", "affiliation", "extra"]))
    # strip whitespace around any csv entries
    teams = list(map(lambda t: {k: v.strip() for k, v in t.items()}, teams))

    menu = [
        (
            t["id"],
            f"{t['name'] : <30} {t['affiliation'] : <40}{' '+t['extra'] if len(t['extra']) > 0 else ''}",
        )
        for t in teams
    ]
    menu.append(('manual', 'Enter team name manually'))

    if configuration["team"]["id"] != "000":
        menu.insert(
            0,
            (
                configuration["team"]["id"],
                f"Keep existing team selection ({configuration['team']['id']} {configuration['team']['name']} {configuration['team']['affiliation']})",
            ),
        )

    (teamid, code) = w.menu(msg="Choose a team", items=menu)
    if code != 0:
        print('Skipping team selection')
        return

    if teamid == 'manual':
        id, code = w.inputbox('Enter team id (e.g. 123)')
        name, code = w.inputbox('Enter team name (e.g. "null pointer")')
        affiliation, code = w.inputbox('Enter team affiliation (e.g. "University of ICPC")')

        # Fake the data so our manually entered data is present
        teams = [{
            'id': id,
            'name': name,
            'affiliation': affiliation,
            'extra': '',
        }]
        teamid = id


    # Update configuration only if they picked a different teamid
    if teamid != configuration["team"]["id"]:
        configuration["team"] = [t for t in teams if t["id"] == teamid][0]
    else:
        # make sure the site matches the team since they picked 'keep same'
        configuration["site"] = read_file("/icpc/SITE", "other")


def configure_autologin(w: Whiptail):
    w.msgbox("TODO autologin CONFIGURATION")


def configure_printing(w: Whiptail):
    w.title = "ICPC Setup - Printing Configuration"

    configuration["printers"] = []
    configuration["print_test_page"] = False
    existing_printers = load_printers()

    skip = not w.yesno(msg="Configure printers?", default="yes")
    if skip:
        return False

    configuration["delete_printers"] = False
    if len(existing_printers) > 0:
        configuration["delete_printers"] = w.yesno(msg="Delete existing printers?", default="no")

    content = fetch_url(configuration['url'] + f"/printers/{configuration['site']}_printers.csv")
    printer_groups = list(csv.DictReader(content.splitlines(), fieldnames=["id", "name"]))
    menu = [(g["id"], f"{g['name']}") for g in printer_groups]
    menu.append(("manual", "Enter printer ip manually"))
    menu.append(("skip", "Skip configuring printers"))

    (printer_group, code) = w.menu(msg="Select printers to install", items=menu)
    if code != 0:
        raise Exception("exited whiptail...")

    if printer_group == "manual":  # Choosing to manually enter printers
        while True:
            (printer, code) = w.inputbox(
                msg="Please enter your printer ip address/hostname.\nNote: Your printer must support IPP Everywhere.\n\nLeave this blank to finish adding printers.",
            )
            if code != 0 or len(printer) == 0:  # they exited abnormally/entered nothing
                break
            # Force it to be a uri if they entered a plain ip address/hostname
            if "://" not in printer:
                printer = f"ipp://{printer}"
            configuration["printers"].append({"uri": printer, "driver": "everywhere", "note": "Entered Manually"})
    elif printer_group != "skip":
        content = fetch_url(configuration['url'] + f"/printers/{configuration['site']}/{printer_group}.csv")
        printers = list(
            csv.DictReader(
                content.splitlines(), fieldnames=["uri", "driver", "note"], restval="Automatically Provisioned"
            )
        )
        configuration["printers"] = printers

    configuration["print_test_page"] = w.yesno(msg="Would you like to send a test page to the printer?", default="no")

    return True


if __name__ == "__main__":
    main()
